// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums Definition ---
enum UserRole {
  guest
  admin
  hotel_staff
}

enum RoomStatus {
  available
  occupied
  cleaning
  maintenance
  out_of_order
}

enum BookingStatus {
  pending_payment
  confirmed
  checked_in
  checked_out
  cancelled
  no_show
}

enum MusicServiceOptions {
  spotify
  yandex_music
  default_sound
}
// --- End Enums Definition ---

model User {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String    @unique
  passwordHash        String
  firstName           String?   @map("first_name")
  lastName            String?   @map("last_name")
  phoneNumber         String?   @unique @map("phone_number")
  role                UserRole  @default(guest) // MODIFIED: Enum used
  onboardingCompleted Boolean   @default(false) @map("onboarding_completed")
  preferences         Json?
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime  @updatedAt @map("updated_at") @db.Timestamptz // MODIFIED: @updatedAt

  bookings            Booking[]
  alarms              Alarm[]
  sharedPermissions   GuestAccessPermission[] @relation("SharedWithUser")
  primaryPermissions  GuestAccessPermission[] @relation("PrimaryGuest")
  roomControlStates   RoomControlState[]

  @@map("users")
}

model RoomType {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  description         String?
  capacity            Int
  basePricePerNight   Decimal   @map("base_price_per_night") @db.Decimal(10, 2)
  amenities           Json?
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime  @updatedAt @map("updated_at") @db.Timestamptz // MODIFIED: @updatedAt

  rooms               Room[]

  @@map("room_types")
}

model Room {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomTypeId              String    @map("room_type_id") @db.Uuid
  roomNumber              String    @unique @map("room_number")
  status                  RoomStatus @default(available) // MODIFIED: Enum used
  bleDoorDeviceId         String?   @unique @map("ble_door_device_id")
  bleLightingSystemId     String?   @unique @map("ble_lighting_system_id")
  bleClimateControlId     String?   @unique @map("ble_climate_control_id")
  bleCurtainControlId     String?   @unique @map("ble_curtain_control_id")
  currentScenarioName     String?   @map("current_scenario_name")
  notes                   String?
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt               DateTime  @updatedAt @map("updated_at") @db.Timestamptz // MODIFIED: @updatedAt

  roomType                RoomType  @relation(fields: [roomTypeId], references: [id])
  bookings                Booking[]
  controlState            RoomControlState?
  alarms                  Alarm[]
  accessPermissions       GuestAccessPermission[]
  currentScenario         RoomScenario? @relation(fields: [currentScenarioName], references: [scenarioName])

  @@map("rooms")
}

model Booking {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String        @map("user_id") @db.Uuid
  roomId              String        @map("room_id") @db.Uuid
  checkInDateTime     DateTime      @map("check_in_date_time") @db.Timestamptz
  checkOutDateTime    DateTime      @map("check_out_date_time") @db.Timestamptz
  status              BookingStatus @default(confirmed) // MODIFIED: Enum used
  totalPrice          Decimal       @map("total_price") @db.Decimal(10, 2)
  specialRequests     String?       @map("special_requests")
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime      @updatedAt @map("updated_at") @db.Timestamptz // MODIFIED: @updatedAt

  user                User          @relation(fields: [userId], references: [id])
  room                Room          @relation(fields: [roomId], references: [id])
  alarms              Alarm[]
  accessPermissions   GuestAccessPermission[]

  @@map("bookings")
}

model RoomControlState {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId              String    @unique @map("room_id") @db.Uuid
  lightingState       Json?     @map("lighting_state")
  climateState        Json?     @map("climate_state")
  curtainState        Json?     @map("curtain_state")
  dndActive           Boolean   @default(false) @map("dnd_active")
  lastChangedByUserId String?   @map("last_changed_by_user_id") @db.Uuid
  lastUpdatedAt       DateTime  @updatedAt @map("last_updated_at") @db.Timestamptz // MODIFIED: @updatedAt (assumes this should track updates to this record)

  room                Room      @relation(fields: [roomId], references: [id])
  lastChangedByUser   User?     @relation(fields: [lastChangedByUserId], references: [id])

  @@map("room_control_states")
}

model RoomScenario {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scenarioName        String    @unique @map("scenario_name")
  description         String?
  lightingSettings    Json?     @map("lighting_settings")
  climateSettings     Json?     @map("climate_settings")
  curtainSettings     Json?     @map("curtain_settings")
  dndActivation       Boolean?  @map("dnd_activation")
  isSystemScenario    Boolean   @default(true) @map("is_system_scenario")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  // No updatedAt needed if scenarios are mostly static after creation, otherwise add it.

  alarms              Alarm[]
  rooms               Room[] // Rooms that might be using this scenario as currentScenario

  @@map("room_scenarios")
}

model Alarm {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId           String    @map("booking_id") @db.Uuid
  userId              String    @map("user_id") @db.Uuid
  roomId              String    @map("room_id") @db.Uuid
  alarmTime           DateTime  @map("alarm_time") @db.Time // MODIFIED: Stores time only
  daysOfWeek          String[]  @map("days_of_week") // Consider array of Enum for days if you prefer strict typing
  isActive            Boolean   @default(true) @map("is_active")
  label               String?
  musicService        MusicServiceOptions? @map("music_service") // MODIFIED: Enum used
  musicResourceUri    String?   @map("music_resource_uri")
  linkedScenarioName  String?   @map("linked_scenario_name")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime  @updatedAt @map("updated_at") @db.Timestamptz // MODIFIED: @updatedAt

  booking             Booking   @relation(fields: [bookingId], references: [id])
  user                User      @relation(fields: [userId], references: [id])
  room                Room      @relation(fields: [roomId], references: [id])
  linkedScenario      RoomScenario? @relation(fields: [linkedScenarioName], references: [scenarioName])

  @@map("alarms")
}

model GuestAccessPermission {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId               String    @map("booking_id") @db.Uuid
  primaryGuestUserId      String    @map("primary_guest_user_id") @db.Uuid
  sharedWithUserId        String?   @map("shared_with_user_id") @db.Uuid
  sharedWithEmailOrPhone  String?   @map("shared_with_email_or_phone")
  roomId                  String    @map("room_id") @db.Uuid
  accessStartTime         DateTime  @map("access_start_time") @db.Timestamptz
  accessEndTime           DateTime  @map("access_end_time") @db.Timestamptz
  bleTemporaryKeyInfo     Json?     @map("ble_temporary_key_info")
  isActive                Boolean   @default(true) @map("is_active")
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz
  // No updatedAt needed if permissions are typically created and then activated/deactivated, not frequently 'edited'. If edits are common, add @updatedAt.

  booking                 Booking   @relation(fields: [bookingId], references: [id])
  primaryGuestUser        User      @relation("PrimaryGuest", fields: [primaryGuestUserId], references: [id])
  sharedWithUser          User?     @relation("SharedWithUser", fields: [sharedWithUserId], references: [id])
  room                    Room      @relation(fields: [roomId], references: [id])

  @@map("guest_access_permissions")
}